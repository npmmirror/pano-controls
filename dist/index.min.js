(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("three"));
	else if(typeof define === 'function' && define.amd)
		define(["three"], factory);
	else if(typeof exports === 'object')
		exports["PanoControls"] = factory(require("three"));
	else
		root["PanoControls"] = factory(root["THREE"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__0__;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(three__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable no-bitwise */
/* eslint-disable @typescript-eslint/ban-ts-ignore */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

console.log("PanoControls " + "2.1.0");
var EPS = 0.000001;
var PI = Math.PI;
/**
 * 可对小数进行“取模”的方法
 * @returns 返回(a / b)的余数
 */
var decableMod = function (a, b) {
    var n = Math.floor(a / b);
    return a - (n * b);
};
var clamp = function (val, min, max) {
    if (val < min) {
        return min;
    }
    if (val > max) {
        return max;
    }
    return val;
};
var loopedNumber = function (val, min, max) {
    if (val < min) {
        // return val + max - min
        // max - (min - val) % (max - min)
        return max - decableMod(min - val, max - min);
    }
    if (val > max) {
        // return val + min - max
        // min + (val - max) % (max - min)
        return min + decableMod(val - max, max - min);
    }
    return val;
};
var PanoControls = /** @class */ (function (_super) {
    __extends(PanoControls, _super);
    function PanoControls(camera, domElement) {
        var _this = _super.call(this) || this;
        _this.enabled = true;
        _this.enableLooped = true;
        _this.enableRotate = true;
        _this.enableRotateDamping = true;
        _this.enableScale = true;
        _this.enableScaleDamping = true;
        /**
         * 手指滑过一个[this.domSizeVectors.x]时，h(或v)的变化量
         */
        _this.rotateSpeed = 120;
        /**
         * 手指扩张一个[this.domSizeVectors.x]时，fov的变化量
         */
        _this.scaleSpeed = -100;
        /**
         * 每个代码执行周期内 自动旋转的角度
         * 该值乘以fps(一般为60)即为每秒旋转的角度
         */
        _this.autoRotateSpeed = -0.05;
        /**
         * 启动自动旋转的时间间隔
         */
        _this.autoRotateInterval = 15000;
        /**
         * h/v发生设置行为(不论是否变动)时触发
         */
        _this.ROTATE_EVENT = {
            type: "rotate",
        };
        /**
         * fov发生设置行为(不论是否变动)时触发
         */
        _this.SCALE_EVENT = {
            type: "scale",
        };
        /**
         * updateCamera时触发
         */
        _this.CHANGE_EVENT = {
            type: "change",
        };
        /**
         * 用户交互时触发
         */
        _this.INTERACT_EVENT = {
            type: "interact",
        };
        /**
         * 一个尺寸的量，触摸旋转时以此为基准
         * 该值越大，则旋转同样角度，手指需要滑动的距离越大
         */
        _this.domSizeVectors = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"]();
        _this._STATES = {
            NONE: 0,
            ROTATE: 1,
            SCALE: 1 << 1,
        };
        _this._state = _this._STATES.NONE;
        _this._minFov = 40;
        _this._maxFov = 140;
        _this._minV = EPS;
        _this._maxV = 180 - EPS;
        _this._minH = -180;
        _this._maxH = 180;
        _this._rotateSmoothFactor = 0.9;
        _this._scaleSmoothFactor = 0.9;
        _this._enableAutoRotate = false;
        _this._autoRotateStart = new Date().getTime();
        _this.target = new three__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
        _this.spherical = new three__WEBPACK_IMPORTED_MODULE_0__["Spherical"]();
        _this.touchScaleStart = 0;
        _this.scaleDelta = 0;
        _this.touchScaleEnd = 0;
        _this.rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"]();
        _this.rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"]();
        _this.rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"]();
        _this.setCursor = function (cursorStr) {
            _this.domElement.style.cursor = cursorStr;
        };
        /**
         * resize的时候重置domSizeVectors
         */
        _this.onResize = function () {
            var _a = _this.domElement, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
            var greatVal = clientWidth > clientHeight
                ? clientWidth
                : clientHeight;
            _this.domSizeVectors.set(greatVal, greatVal);
        };
        _this.onTouchStart = function (e) {
            // touchstart可以阻止浏览器默认右滑行为
            e.preventDefault();
            var touches = e.touches;
            switch (touches.length) {
                case 1:
                    _this.onRotateStart(touches[0], true);
                    break;
                case 2:
                    _this.onTouchScaleStart(touches);
                    break;
                default:
                    break;
            }
        };
        _this.onTouchMove = function (e) {
            e.preventDefault();
            var touches = e.touches;
            switch (touches.length) {
                case 1:
                    _this.onRotate(touches[0]);
                    break;
                case 2:
                    _this.onTouchScale(touches);
                    break;
                default:
                    break;
            }
        };
        _this.onTouchEnd = function (e) {
            e.preventDefault();
            var totalTouchesLength = e.touches.length + e.changedTouches.length;
            switch (totalTouchesLength) {
                case 1:
                    _this.onRotateEnd(e, true);
                    break;
                case 2:
                    _this.onTouchScaleEnd();
                    break;
                default:
                    break;
            }
        };
        _this.onMouseDown = function (e) {
            _this.setCursor("grabbing");
            e.preventDefault();
            _this.onRotateStart(e);
        };
        _this.onMouseMove = function (e) {
            e.preventDefault();
            _this.onRotate(e);
        };
        _this.onMouseUp = function (e) {
            _this.setCursor("grab");
            e.preventDefault();
            _this.onRotateEnd(e);
        };
        _this.onWheel = function (e) {
            e.preventDefault();
            _this.onMouseScale(e.deltaY);
        };
        _this.camera = camera;
        _this.domElement = domElement;
        _this.setCursor("grab");
        var v = camera.getWorldDirection(new three__WEBPACK_IMPORTED_MODULE_0__["Vector3"]());
        _this.spherical.setFromVector3(v);
        _this.target.copy(camera.position).add(v);
        _this.onResize();
        _this.addEvents();
        return _this;
    }
    PanoControls.prototype.resetAutoRotateTimer = function () {
        this._autoRotateStart = new Date().getTime();
    };
    PanoControls.prototype.onRotateStart = function (_a, isTouch) {
        var clientX = _a.clientX, clientY = _a.clientY;
        if (isTouch === void 0) { isTouch = false; }
        this._state |= this._STATES.ROTATE;
        this.rotateStart.set(clientX, clientY);
        this.rotateEnd.set(clientX, clientY);
        if (isTouch) {
            document.addEventListener("touchmove", this.onTouchMove);
            document.addEventListener("touchend", this.onTouchEnd);
        }
        else {
            document.addEventListener("mousemove", this.onMouseMove);
            document.addEventListener("mouseup", this.onMouseUp);
        }
    };
    PanoControls.prototype.onRotate = function (_a) {
        var clientX = _a.clientX, clientY = _a.clientY;
        this.rotateEnd.set(clientX, clientY);
        this.update();
        this.rotateStart.set(clientX, clientY);
        this.dispatchEvent(this.INTERACT_EVENT);
        if (this.enableAutoRotate) {
            this.resetAutoRotateTimer();
        }
    };
    PanoControls.prototype.onRotateEnd = function (e, isTouch) {
        if (isTouch === void 0) { isTouch = false; }
        this._state &= ~this._STATES.ROTATE;
        if (isTouch) {
            document.removeEventListener("touchmove", this.onTouchMove);
            document.removeEventListener("touchend", this.onTouchEnd);
        }
        else {
            document.removeEventListener("mousemove", this.onMouseMove);
            document.removeEventListener("mouseup", this.onMouseUp);
        }
    };
    PanoControls.prototype.onTouchScaleStart = function (touches) {
        this._state |= this._STATES.SCALE;
        var _a = touches[0], x1 = _a.clientX, y1 = _a.clientY;
        var _b = touches[1], x2 = _b.clientX, y2 = _b.clientY;
        this.touchScaleStart = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"](x1, y1).distanceTo(new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"](x2, y2)) / this.domSizeVectors.x;
        this.touchScaleEnd = this.touchScaleStart;
        document.addEventListener("touchmove", this.onTouchMove);
        document.addEventListener("touchend", this.onTouchEnd);
    };
    PanoControls.prototype.onTouchScale = function (touches) {
        var _a = touches[0], x1 = _a.clientX, y1 = _a.clientY;
        var _b = touches[1], x2 = _b.clientX, y2 = _b.clientY;
        this.touchScaleEnd = new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"](x1, y1).distanceTo(new three__WEBPACK_IMPORTED_MODULE_0__["Vector2"](x2, y2)) / this.domSizeVectors.x;
        this.update();
        this.touchScaleStart = this.touchScaleEnd;
        this.dispatchEvent(this.INTERACT_EVENT);
        if (this.enableAutoRotate) {
            this.resetAutoRotateTimer();
        }
    };
    PanoControls.prototype.onTouchScaleEnd = function () {
        this._state &= ~this._STATES.SCALE;
        this.touchScaleStart = 0;
        this.touchScaleEnd = 0;
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
    };
    PanoControls.prototype.onMouseScale = function (deltaY) {
        if (Math.abs(deltaY) < 10) {
            /**
             * 懒得写各种兼容了，发现浏览器实现得千奇百怪，往后滚动滚轮一格，deltaY值有以下实现：
             * 以下浏览器均为win10下的64位浏览器：
             * chrome 72.0.3626.121: 100
             * Firefox Quantum 66.0.2: 3
             * ie 11.503.17763.0 最令人发指，会随着页面高度动态改变，从50变到200+...
             */
            // eslint-disable-next-line no-param-reassign
            deltaY *= 40;
        }
        this._state |= this._STATES.SCALE;
        this.touchScaleStart = 0;
        /**
         * WARNING!!!
         * 这里除以7000，是经验值，表示鼠标滚轮和触摸屏之间的协调参数
         */
        this.touchScaleEnd = -deltaY / 7000;
        this.update();
        this._state &= ~this._STATES.SCALE;
        this.dispatchEvent(this.INTERACT_EVENT);
        if (this.enableAutoRotate) {
            this.resetAutoRotateTimer();
        }
    };
    PanoControls.prototype.addEvents = function () {
        this.domElement.addEventListener("mousedown", this.onMouseDown);
        this.domElement.addEventListener("touchstart", this.onTouchStart);
        this.domElement.addEventListener("wheel", this.onWheel);
        window.addEventListener("resize", this.onResize);
    };
    PanoControls.prototype.removeEvents = function () {
        this.domElement.removeEventListener("mousedown", this.onMouseDown);
        this.domElement.removeEventListener("touchstart", this.onTouchStart);
        this.domElement.removeEventListener("wheel", this.onWheel);
        window.removeEventListener("resize", this.onResize);
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
        document.removeEventListener("mousemove", this.onMouseMove);
        document.removeEventListener("mouseup", this.onMouseUp);
    };
    PanoControls.prototype.update = function () {
        if (!this.enabled) {
            return;
        }
        var rotateNeedUpdate = this.enableRotate && this.updateRotateDelta();
        var scaleNeedUpdate = this.enableScale && this.updateScaleDelta();
        if (rotateNeedUpdate || scaleNeedUpdate) {
            this.updateCamera();
        }
    };
    PanoControls.prototype.updateCamera = function () {
        var _a = this, target = _a.target, spherical = _a.spherical, camera = _a.camera;
        this.dispatchEvent(this.CHANGE_EVENT);
        target.setFromSpherical(spherical).add(camera.position);
        camera.lookAt(target);
        camera.updateProjectionMatrix();
    };
    PanoControls.prototype.updateRotateDelta = function () {
        var needsUpdate = false;
        if (this._state & this._STATES.ROTATE) {
            this.rotateDelta
                .subVectors(this.rotateEnd, this.rotateStart)
                .divide(this.domSizeVectors)
                .multiplyScalar(this.rotateSpeed);
            needsUpdate = true;
        }
        else if (this.enableRotateDamping && this.rotateDelta.lengthSq() > EPS) {
            this.rotateDelta.multiplyScalar(this.rotateSmoothFactor);
            needsUpdate = true;
        }
        else {
            this.rotateDelta.set(0, 0);
        }
        var delta = new Date().getTime() - this._autoRotateStart;
        if (this.enableAutoRotate && (delta > this.autoRotateInterval)) {
            this._state |= this._STATES.ROTATE;
            this.rotateDelta.x += this.autoRotateSpeed;
            needsUpdate = true;
        }
        if (needsUpdate) {
            this.h += this.rotateDelta.x;
            this.v -= this.rotateDelta.y;
        }
        return needsUpdate;
    };
    PanoControls.prototype.updateScaleDelta = function () {
        var needsUpdate = false;
        if (this._state & this._STATES.SCALE) {
            this.scaleDelta = (this.touchScaleEnd - this.touchScaleStart) * this.scaleSpeed;
            this.fov += this.scaleDelta;
            needsUpdate = true;
        }
        else if (this.enableScaleDamping && Math.abs(this.scaleDelta) > EPS) {
            this.scaleDelta *= this.scaleSmoothFactor;
            this.fov += this.scaleDelta;
            needsUpdate = true;
        }
        else {
            this.scaleDelta = 0;
        }
        return needsUpdate;
    };
    Object.defineProperty(PanoControls.prototype, "enableAutoRotate", {
        get: function () {
            return this._enableAutoRotate;
        },
        set: function (val) {
            this._enableAutoRotate = val;
            if (val) {
                this.resetAutoRotateTimer();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "rotateSmoothFactor", {
        /**
         * 旋转衰减因子，between 0 and 1
         */
        get: function () {
            return this._rotateSmoothFactor;
        },
        set: function (val) {
            if (val <= 0 || val >= 1) {
                console.error("PanoControls.rotateSmoothFactor must be a value between 0 and 1.");
            }
            this._rotateSmoothFactor = clamp(val, EPS, 1 - EPS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "scaleSmoothFactor", {
        get: function () {
            return this._scaleSmoothFactor;
        },
        /**
         * 缩放衰减因子，between 0 and 1
         */
        set: function (val) {
            if (val <= 0 || val >= 1) {
                console.error("PanoControls.scaleSmoothFactor must be a value between 0 and 1.");
            }
            this._scaleSmoothFactor = clamp(val, EPS, 1 - EPS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "h", {
        get: function () {
            return (this.spherical.theta * 180) / PI;
        },
        set: function (val) {
            var realVal = this.enableLooped
                ? loopedNumber(val, this.minH, this.maxH)
                : clamp(val, this.minH, this.maxH);
            this.spherical.theta = (realVal / 180) * PI;
            this.dispatchEvent(this.ROTATE_EVENT);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "v", {
        get: function () {
            return (this.spherical.phi * 180) / PI;
        },
        set: function (val) {
            var realVal = clamp(val, this.minV, this.maxV);
            this.spherical.phi = (realVal / 180) * PI;
            this.dispatchEvent(this.ROTATE_EVENT);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "fov", {
        get: function () {
            return this.camera.fov;
        },
        set: function (val) {
            this.camera.fov = clamp(val, this.minFov, this.maxFov);
            this.dispatchEvent(this.SCALE_EVENT);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "minFov", {
        get: function () {
            return this._minFov;
        },
        set: function (val) {
            this._minFov = clamp(val, EPS, this.maxFov);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "maxFov", {
        get: function () {
            return this._maxFov;
        },
        set: function (val) {
            this._maxFov = clamp(val, this.minFov, 180 - EPS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "minV", {
        get: function () {
            return this._minV;
        },
        set: function (val) {
            this._minV = clamp(val, EPS, this.maxV);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "maxV", {
        get: function () {
            return this._maxV;
        },
        set: function (val) {
            this._maxV = clamp(val, this.minV, 180 - EPS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "minH", {
        get: function () {
            return this._minH;
        },
        set: function (val) {
            this._minH = clamp(val, -180, this.maxH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanoControls.prototype, "maxH", {
        get: function () {
            return this._maxH;
        },
        set: function (val) {
            this._maxH = clamp(val, this.minH, 180);
        },
        enumerable: true,
        configurable: true
    });
    return PanoControls;
}(three__WEBPACK_IMPORTED_MODULE_0__["EventDispatcher"]));
/* harmony default export */ __webpack_exports__["default"] = (PanoControls);


/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=index.min.js.map